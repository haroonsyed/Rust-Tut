Rust files end with extension '.rs'
You must install rust, it does not run natively
To compile a rust file use "rustc file.rs", which will create an executable

Starting a project:
Use the cargo package manager
"cargo init"
This will create a cargo.toml file which has all the dependencies and config

Running a project:
Execute "cargo run", which will compile and run the code in src
The compiled files will be located in a target folder, which should be git ignored

Compiling for production:
Execute "cargo build --release". This will include optimizations.
The release folder in target will contain the executable.

FUNCTIONS:
Create a function with "pub fn name(){}"
First import said file in another file with "mod filename;"
Call said function with "filename::func()"

STRING/PRINT:
"{}" is a placeholder for a variable or non-string type or arg name.
println!("My age is {}",20);
Putting an index in "{}" indicates which argument to use.
println!("My name is {1} my age is{0}",20,"Haroon");

Two types of strings, the immutable primitive one and the dynamic String one
Making a dynamic string: "let myString = String::from("hello");

RUST DEREFERENCES POINTERS WHEN PRINTING

VARIABLES:
defined with "let age = 20"
Variables are block scoped and IMMUTABLE by default
to make mutable define as "let mut age = 20"
To define a constant (inlined), the type must also be specified "const ID:i32 =52"
Typecasting simply requires the "as" keyword

There is no inc or dec in RUST (i.e x++)

ARRAYS:
Fixed size and uniform type
Indexing works the same as most languages "arr[index]"
The array values is not mutable unless array is defined as mutable 
    (does not apply to ref only).


VECTORS:
Basically a resizable uniform list.
You can push or pop items from it.
Syntax: let mut numbers:Vec<i32> = vec![1];

LOOPING throuh iterable: 
for x in numbers.iter() {
    //do something, Don't forget to dereference the pointer
}

use iter_mut() to be able to mutate the values. 

CONDITIONALS:
Pretty much how c works. However there is no ternary operator.

LOOPS:
infinite has no condition
See loops.rs for syntax of other loop types


Functions:
Everything is pass by value. But strings and objects have the
memory location copied, so they still hold a reference to original value.
Primitives work as both.

Return type is indicated by an arrow following the paramter list