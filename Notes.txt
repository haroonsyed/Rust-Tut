Rust files end with extension '.rs'
You must install rust, it does not run natively
To compile a rust file use "rustc file.rs", which will create an executable

Starting a project:
Use the cargo package manager
"cargo init"
This will create a cargo.toml file which has all the dependencies and config

Running a project:
Execute "cargo run", which will compile and run the code in src
The compiled files will be located in a target folder, which should be git ignored

Compiling for production:
Execute "cargo build --release". This will include optimizations.
The release folder in target will contain the executable.

FUNCTIONS:
Create a function with "pub fn name(){}"
First import said file in another file with "mod filename;"
Call said function with "filename::func()"

STRING/PRINT:
"{}" is a placeholder for a variable or non-string type or arg name.
println!("My age is {}",20);
Putting an index in "{}" indicates which argument to use.
println!("My name is {1} my age is{0}",20,"Haroon");

Two types of strings, the immutable primitive one and the dynamic String one
Making a dynamic string: "let myString = String::from("hello");

RUST DEREFERENCES POINTERS WHEN PRINTING

VARIABLES:
defined with "let age = 20"
Variables are block scoped and IMMUTABLE by default
to make mutable define as "let mut age = 20"
To define a constant (inlined), the type must also be specified "const ID:i32 =52"
Typecasting simply requires the "as" keyword

There is no inc or dec in RUST (i.e x++)

TYPES:
//Primitive types
Intergers: u8,i8,u16,i16,u32,i32,u64,i64,u128,i128
Floats: f32,f64
bool
char
Tuples
Arrays
Objects

To cast use the "as" keyword with the type
To cast string to int use parse with error handling.

ARRAYS:
Fixed size and uniform type
Indexing works the same as most languages "arr[index]"
The array values is not mutable unless array is defined as mutable 
    (does not apply to ref only).


VECTORS:
Basically a resizable uniform list.
You can push or pop items from it.
Syntax: let mut numbers:Vec<i32> = vec![1];

LOOPING throuh iterable: 
for x in numbers.iter() {
    //do something, Don't forget to dereference the pointer
}

use iter_mut() to be able to mutate the values. 

CONDITIONALS:
Pretty much how c works. However there is no ternary operator.

Case Statement:
Use match
match variable_name {

    CASE_1_VAL => {
        //Do stuff
    }

    etc..

}

LOOPS:
infinite has no condition
See loops.rs for syntax of other loop types


FUNCTIONS:
Everything is pass by value. But strings and objects have the
memory location copied, so they still hold a reference to original value.
Primitives work as both.

Return type is indicated by an arrow following the paramter list

You can use variables to call a function
YOu can also have anonymous functions with closures (using pipe syntax)
Closure can refernece outer scope.

POINTERS:
Like in c they point to a resource in memory (usually on heap)
A non-primitive variable loses reference to object when not using & on reassignment

The list of primitives are below:
bool, char, numeric_types, arrays, slices, tuples, functions
(it is kinda strange how arr,func etc are here, but it makes sense when looking at things from
a memory ownership perspective)

& must be placed on owner variable until released

STRUCTS:
Basically how in C all members are public and it is a class. NOT Primitives
Remember that in order to change values a resource must be declared as mutable.
Struct Tuple can be declared if you have a small resource that doesn't need semantics

The functions for a struct are defined separately in an `impl` block. 
This lends itself well to composition of functionality. Especially with Traits.

TUPLES:
Essentially like python you can bundle multiple values together
To index between them you can do tuple.0, tuple.1, tuple.2 (numerical not named) etc 

ENUMS:
Pretty standard. Defined with enum NAME { list enums here }

USING:
Using a namespace is standard practice.
This is because it does not work the same as c++ causing conflicts and also namespace in rust are longer.

HashMaps:
Fairly standard, need to 
use std::collections::HashMap;
To declare a hashmap is the following:
let mut map: HashMap<&str, i32> = HashMap::new();
To iterate is the following:
for (k, v) in map.iter() {
    println!("Key {}, value {}", k, v);
}

Traits:
Similar to interface.
Allows structs to implement custom versions of a function through common name and parameter types.
Lends itself well to composition over inheritance.



